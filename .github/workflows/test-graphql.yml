name: Verify Output Consistency

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Create a temporary Cargo project for old code
      run: |
        mkdir old_code
        cd old_code
        cargo init --bin
        echo '[dependencies]' >> Cargo.toml
        echo 'async-graphql = "4.0"' >> Cargo.toml
        echo 'anyhow = "1.0"' >> Cargo.toml
        echo 'tailcall_typedefs = { path = "../path_to_your_local_crate" }' >> Cargo.toml
        echo 'use async_graphql::ServiceDocument;' > src/main.rs
        echo 'use std::fs::File;' >> src/main.rs
        echo 'use tailcall_typedefs::gen_gql_schema::generate_rc_file;' >> src/main.rs
        echo 'use anyhow::Result;' >> src/main.rs
        echo 'fn main() -> Result<()> {' >> src/main.rs
        echo '    let mut doc = ServiceDocument::new();' >> src/main.rs
        echo '    generate_rc_file(&mut doc)?;' >> src/main.rs
        echo '    let file = File::create("../old_output.graphql")?;' >> src/main.rs
        echo '    tailcall_typedefs::document::print(&doc, file)?;' >> src/main.rs
        echo '    Ok(())' >> src/main.rs
        cargo run

    - name: Create a temporary Cargo project for new code
      run: |
        mkdir new_code
        cd new_code
        cargo init --bin
        echo '[dependencies]' >> Cargo.toml
        echo 'async-graphql = "4.0"' >> Cargo.toml
        echo 'anyhow = "1.0"' >> Cargo.toml
        echo 'tailcall_typedefs = { path = "../path_to_your_local_crate" }' >> Cargo.toml
        echo 'use tailcall_typedefs::gen_gql_schema::update_gql;' > src/main.rs
        echo 'use anyhow::Result;' >> src/main.rs
        echo 'fn main() -> Result<()> {' >> src/main.rs
        echo '    update_gql()?;' >> src/main.rs
        echo '    Ok(())' >> src/main.rs
        cargo run
        mv new_output.graphql ..

    - name: Compare outputs
      run: diff old_output.graphql new_output.graphql
