---
source: src/generator/from_proto.rs
expression: result
---
schema @server @upstream {
  query: Query
}

input greetings_a__b__HelloRequest {
  name: String
}

input greetings_b__c__HelloRequest {
  name: String
}

input news__MultipleNewsId {
  ids: [news__NewsId]!
}

input news__News {
  body: String
  id: Int
  postImage: String
  status: news__Status
  title: String
}

input news__NewsId {
  id: Int
}

enum news__Status {
  DELETED
  DRAFT
  PUBLISHED
}

type Query {
  greetings_a__b__SayHello(helloRequest: greetings_a__b__HelloRequest!): greetings_a__b__HelloReply! @grpc(method: "greetings_a__b.SayHello")
  greetings_b__c__SayHello(helloRequest: greetings_b__c__HelloRequest!): greetings_b__c__HelloReply! @grpc(method: "greetings_b__c.SayHello")
  news__AddNews(news: news__News!): news__News! @grpc(method: "news.AddNews")
  news__DeleteNews(newsId: news__NewsId!): news__Empty! @grpc(method: "news.DeleteNews")
  news__EditNews(news: news__News!): news__News! @grpc(method: "news.EditNews")
  news__GetAllNews: news__NewsList! @grpc(method: "news.GetAllNews")
  news__GetMultipleNews(multipleNewsId: news__MultipleNewsId!): news__NewsList! @grpc(method: "news.GetMultipleNews")
  news__GetNews(newsId: news__NewsId!): news__News! @grpc(method: "news.GetNews")
}

type greetings_a__b__HelloReply {
  message: String
}

type greetings_b__c__HelloReply {
  message: String
}

type news__NewsList {
  news: [news__News]!
}
